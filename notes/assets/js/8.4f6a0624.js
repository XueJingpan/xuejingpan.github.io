(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{366:function(t,a,s){"use strict";s.r(a);var n=s(44),_=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_1-数据结构入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构入门"}},[t._v("#")]),t._v(" 1.数据结构入门")]),t._v(" "),s("h2",{attrs:{id:"_1-1-什么是数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是数据结构"}},[t._v("#")]),t._v(" 1.1.什么是数据结构")]),t._v(" "),s("p",[t._v("数据结构 (data structure) 是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。")]),t._v(" "),s("p",[t._v("数据结构是学习数据存储方式的一门学科。直白地理解，就是研究数据的存储方式，它教会我们“如何存储具有复杂关系的数据更有助于后期对数据的再利用”。")]),t._v(" "),s("h2",{attrs:{id:"_1-2-数据结构的存储类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-数据结构的存储类型"}},[t._v("#")]),t._v(" 1.2.数据结构的存储类型")]),t._v(" "),s("p",[t._v("数据结构大致包含以下几种存储结构：")]),t._v(" "),s("ul",[s("li",[t._v("线性表：主要包括顺序表、链表、栈、队列；")]),t._v(" "),s("li",[t._v("树结构：主要包括普通树、二叉树、线索二叉树等；")]),t._v(" "),s("li",[t._v("图存储结构；")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-1-线性表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-线性表"}},[t._v("#")]),t._v(" 1.2.1.线性表")]),t._v(" "),s("p",[t._v("在线性数据结构中，元素以非分层方式存储，除了第一个和最后一个元素，它的每个元素具有后继元素和前导元素。")]),t._v(" "),s("p",[t._v("线性表结构存储的数据往往是可以依次排列的，就像小朋友手拉手，每位学生的前面和后面都仅有一个小朋友和他拉手，具备这种“一对一”关系的数据就可以使用线性表来存储。例如，存储类似 {1,3,5,7,9} 这样的数据时，各元素依次排列，每个元素的前面和后边有且仅有一个元素与之相邻（除首元素和尾元素），因此可以使用线性表存储。")]),t._v(" "),s("p",[t._v("线性表并不是一种具体的存储结构，它包含顺序存储结构和链式存储结构，是顺序表和链表的统称。")]),t._v(" "),s("h4",{attrs:{id:"_1-2-1-1-顺序表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-1-顺序表"}},[t._v("#")]),t._v(" 1.2.1.1.顺序表")]),t._v(" "),s("p",[t._v("顺序表，简单地理解，就是常用的数组（由于顺序表结构的底层实现借助的就是数组，因此对于初学者来说，可以把顺序表完全等价为数组，但实则不是这样。数据结构是研究数据存储方式的一门学科，它囊括的都是各种存储结构，而数组只是各种编程语言中的基本数据类型，并不属于数据结构的范畴）。")]),t._v(" "),s("p",[t._v("使用顺序表（底层实现靠数组）时，需要提前申请一定大小的存储空间，这块存储空间的物理地址是连续的。")]),t._v(" "),s("h4",{attrs:{id:"_1-2-1-2-链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-2-链表"}},[t._v("#")]),t._v(" 1.2.1.2.链表")]),t._v(" "),s("p",[t._v("使用链表存储数据时，是随用随申请，因此数据的存储位置是相互分离的，换句话说，数据的存储位置是随机的。为了给各个数据块建立“依次排列”的关系，链表给各数据块增设一个指针，每个数据块的指针都指向下一个数据块（最后一个数据块的指针指向 NULL）。")]),t._v(" "),s("h4",{attrs:{id:"_1-2-1-3-栈和队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-3-栈和队列"}},[t._v("#")]),t._v(" 1.2.1.3.栈和队列")]),t._v(" "),s("p",[t._v("栈和队列隶属于线性表，是特殊的线性表，因为它们对线性表中元素的进出做了明确的要求。")]),t._v(" "),s("ul",[s("li",[t._v("栈中的元素只能从线性表的一端进出（另一端封死），且要遵循“先入后出”的原则，即先进栈的元素后出栈；")]),t._v(" "),s("li",[t._v("队列中的元素只能从线性表的一端进，从另一端出，且要遵循“先入先出”的特点，即先进队列的元素也要先出队列；")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-2-树存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-树存储结构"}},[t._v("#")]),t._v(" 1.2.2.树存储结构")]),t._v(" "),s("p",[t._v("树存储结构适合存储具有“一对多”关系的数据。")]),t._v(" "),s("p",[t._v("比如张三只有一个父亲，但他却有两（多）个孩子，这就是“一对多”的关系，满足这种关系的数据可以使用树存储结构。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-3-图存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-图存储结构"}},[t._v("#")]),t._v(" 1.2.3.图存储结构")]),t._v(" "),s("p",[t._v("图存储结构适合存储具有“多对多”关系的数据。")]),t._v(" "),s("h1",{attrs:{id:"_2-线性数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线性数据结构"}},[t._v("#")]),t._v(" 2.线性数据结构")]),t._v(" "),s("h2",{attrs:{id:"_2-1-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-数组"}},[t._v("#")]),t._v(" 2.1.数组")]),t._v(" "),s("p",[s("strong",[t._v("数组（Array）")]),t._v(" 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。")]),t._v(" "),s("p",[t._v("我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。")]),t._v(" "),s("p",[t._v("数组可以随机访问数组的元素，因为可使用给定的基址和数据元素的大小来计算数组的每个元素的地址。")]),t._v(" "),s("p",[t._v("如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("假如数组的长度为 n。\n访问："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问特定位置的元素")]),t._v("\n插入："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（n ）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时")]),t._v("\n删除："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（n）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时")]),t._v("\n")])])]),s("p",[t._v("数组的时间复杂度")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("时间复杂度")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("访问")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("搜索")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("插入")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("删除")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")])])])]),t._v(" "),s("p",[t._v("数组的空间复杂度")]),t._v(" "),s("p",[t._v("在数组中，最坏情况下的空间复杂度是O(n)。")]),t._v(" "),s("h2",{attrs:{id:"_2-2-链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-链表"}},[t._v("#")]),t._v(" 2.2.链表")]),t._v(" "),s("p",[s("strong",[t._v("链表（LinkedList）")]),t._v(" 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。")]),t._v(" "),s("p",[t._v("链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。")]),t._v(" "),s("p",[t._v("使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。")]),t._v(" "),s("p",[s("strong",[t._v("常见链表分类：")])]),t._v(" "),s("ul",[s("li",[t._v("单链表")]),t._v(" "),s("li",[t._v("双向链表")]),t._v(" "),s("li",[t._v("循环链表")]),t._v(" "),s("li",[t._v("双向循环链表")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("假如链表中有n个元素。\n访问：O（n）//访问特定位置的元素\n插入删除：O（1）//必须要要知道插入元素的位置\n")])])]),s("p",[t._v("链表的时间复杂度")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("时间复杂度")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("访问")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("θ(n)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("搜索")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("θ(n)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("插入")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("θ(1)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("删除")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("θ(1)")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-2-1-单链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-单链表"}},[t._v("#")]),t._v(" 2.2.1.单链表")]),t._v(" "),s("p",[s("strong",[t._v("单链表")]),t._v(" 只有一个方向，结点只有一个后继指针 next  指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head  节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。")]),t._v(" "),s("h3",{attrs:{id:"_2-2-2-循环链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-循环链表"}},[t._v("#")]),t._v(" 2.2.2.循环链表")]),t._v(" "),s("p",[t._v("**循环链表 **其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。")]),t._v(" "),s("h3",{attrs:{id:"_2-2-3-双向链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-双向链表"}},[t._v("#")]),t._v(" 2.2.3.双向链表")]),t._v(" "),s("p",[s("strong",[t._v("双向链表")]),t._v(" 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。")]),t._v(" "),s("h3",{attrs:{id:"_2-2-4-双循环链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-双循环链表"}},[t._v("#")]),t._v(" 2.2.4.双循环链表")]),t._v(" "),s("p",[s("strong",[t._v("双向循环链表")]),t._v(" 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。")]),t._v(" "),s("h2",{attrs:{id:"_2-3-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-栈"}},[t._v("#")]),t._v(" 2.3.栈")]),t._v(" "),s("h3",{attrs:{id:"_2-3-1-栈简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-栈简介"}},[t._v("#")]),t._v(" 2.3.1.栈简介")]),t._v(" "),s("p",[s("strong",[t._v("栈")]),t._v(" (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 "),s("strong",[t._v("后进先出（LIFO, Last In First Out）")]),t._v(" 的原理运作。"),s("strong",[t._v("在栈中，push 和 pop 的操作都发生在栈顶。")])]),t._v(" "),s("p",[t._v("栈常用一维数组或链表来实现，用数组实现的栈叫作 "),s("strong",[t._v("顺序栈")]),t._v(" ，用链表实现的栈叫作 "),s("strong",[t._v("链式栈")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("假设堆栈中有n个元素。\n访问："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（n）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最坏情况")]),t._v("\n插入删除："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//顶端插入和删除元素")]),t._v("\n")])])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("操作")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("时间复杂度")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("添加")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("o(1)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("删除")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("on)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("搜索")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("o(n)")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-3-2-栈的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-栈的实现"}},[t._v("#")]),t._v(" 2.3.2.栈的实现")]),t._v(" "),s("p",[t._v("栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。")]),t._v(" "),s("p",[t._v("栈需要具有"),s("code",[t._v("push()")]),t._v("、"),s("code",[t._v("pop()")]),t._v("（返回栈顶元素并出栈）、"),s("code",[t._v("peek()")]),t._v(" （返回栈顶元素不出栈）、"),s("code",[t._v("isEmpty()")]),t._v("、"),s("code",[t._v("size()")]),t._v("这些基本的方法。")]),t._v(" "),s("h3",{attrs:{id:"_2-3-3-栈的常见应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-栈的常见应用场景"}},[t._v("#")]),t._v(" 2.3.3.栈的常见应用场景")]),t._v(" "),s("h4",{attrs:{id:"_2-3-3-1浏览器的前进和后退功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-1浏览器的前进和后退功能"}},[t._v("#")]),t._v(" 2.3.3.1浏览器的前进和后退功能")]),t._v(" "),s("p",[t._v("我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把  1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从  Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到  Stack1 中。")]),t._v(" "),s("h4",{attrs:{id:"_2-3-3-2-检查符号是否成对出现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-2-检查符号是否成对出现"}},[t._v("#")]),t._v(" 2.3.3.2.检查符号是否成对出现")]),t._v(" "),s("blockquote",[s("p",[t._v("给定一个只包括 "),s("code",[t._v("'('")]),t._v("，"),s("code",[t._v("')'")]),t._v("，"),s("code",[t._v("'{'")]),t._v("，"),s("code",[t._v("'}'")]),t._v("，"),s("code",[t._v("'['")]),t._v("，"),s("code",[t._v("']'")]),t._v(" 的字符串，判断该字符串是否有效。")]),t._v(" "),s("p",[t._v("有效字符串需满足：")]),t._v(" "),s("ol",[s("li",[t._v("左括号必须用相同类型的右括号闭合。")]),t._v(" "),s("li",[t._v("左括号必须以正确的顺序闭合。")])]),t._v(" "),s("p",[t._v('比如 "()"、"()[]{}"、"{[]}" 都是有效字符串，而 "(]" 、"([)]" 则不是。')])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 括号之间的对应规则")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" mappings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    mappings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    mappings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'}'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    mappings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("']'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'['")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" chars "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toCharArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" chars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mappings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" topElement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("topElement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" mappings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-3-3-3-反转字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-3-反转字符串"}},[t._v("#")]),t._v(" 2.3.3.3.反转字符串")]),t._v(" "),s("p",[t._v("将字符串中的每个字符先入栈再出栈就可以了。")]),t._v(" "),s("h4",{attrs:{id:"_2-3-3-4-维护函数调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-4-维护函数调用"}},[t._v("#")]),t._v(" 2.3.3.4.维护函数调用")]),t._v(" "),s("p",[t._v("最后一个被调用的函数必须先完成执行，符合栈的 "),s("strong",[t._v("后进先出（LIFO, Last In First Out）")]),t._v(" 特性。")]),t._v(" "),s("h2",{attrs:{id:"_2-4-队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-队列"}},[t._v("#")]),t._v(" 2.4.队列")]),t._v(" "),s("h3",{attrs:{id:"_2-4-1-队列简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-队列简介"}},[t._v("#")]),t._v(" 2.4.1.队列简介")]),t._v(" "),s("p",[s("strong",[t._v("队列")]),t._v(" 是 "),s("strong",[t._v("先进先出( FIFO，First In, First Out)")]),t._v(" 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 "),s("strong",[t._v("顺序队列")]),t._v(" ，用链表实现的队列叫作 "),s("strong",[t._v("链式队列")]),t._v(" 。"),s("strong",[t._v("队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("假设队列中有n个元素。\n访问："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（n）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最坏情况")]),t._v("\n插入删除："),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("O")]),t._v("（"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后端插入前端删除元素")]),t._v("\n")])])]),s("p",[t._v("队列的时间复杂度")]),t._v(" "),s("h3",{attrs:{id:"_2-4-2-队列分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-队列分类"}},[t._v("#")]),t._v(" 2.4.2.队列分类")]),t._v(" "),s("h4",{attrs:{id:"_2-4-2-1-单队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-1-单队列"}},[t._v("#")]),t._v(" 2.4.2.1.单队列")]),t._v(" "),s("p",[t._v("单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 "),s("strong",[t._v("顺序队列（数组实现）")]),t._v(" 和 "),s("strong",[t._v("链式队列（链表实现）")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。")])]),t._v(" "),s("p",[t._v("假设一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 "),s("strong",[t._v("”假溢出“")]),t._v(" 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。")]),t._v(" "),s("h4",{attrs:{id:"_2-4-2-2-循环队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-2-循环队列"}},[t._v("#")]),t._v(" 2.4.2.2.循环队列")]),t._v(" "),s("p",[t._v("循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-3-常见的应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-常见的应用场景"}},[t._v("#")]),t._v(" 2.4.3.常见的应用场景")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("阻塞队列：")]),t._v(" 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。")]),t._v(" "),s("li",[s("strong",[t._v("线程池中的请求/任务队列：")]),t._v("  线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ："),s("code",[t._v("FixedThreadPool")]),t._v(" 使用无界队列 "),s("code",[t._v("LinkedBlockingQueue")]),t._v("。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出"),s("code",[t._v("java.util.concurrent.RejectedExecutionException")]),t._v(" 异常。")]),t._v(" "),s("li",[t._v("Linux 内核进程队列（按优先级排队）")]),t._v(" "),s("li",[t._v("现实生活中的派对，播放器上的播放列表;")]),t._v(" "),s("li",[t._v("消息队列")])]),t._v(" "),s("h1",{attrs:{id:"_3-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-树"}},[t._v("#")]),t._v(" 3.树")]),t._v(" "),s("h2",{attrs:{id:"_3-1-树的概括"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-树的概括"}},[t._v("#")]),t._v(" 3.1.树的概括")]),t._v(" "),s("p",[t._v("树是一种递归数据结构，包含一个或多个数据节点的集合，其中一个节点被指定为树的根，而其余节点被称为根的子节点。")]),t._v(" "),s("p",[t._v("除根节点之外的节点被划分为非空集，其中每个节点将被称为子树。")]),t._v(" "),s("p",[t._v("树的节点要么保持它们之间的父子关系，要么它们是姐妹节点。")]),t._v(" "),s("p",[t._v("在通用树中，一个节点可以具有任意数量的子节点，但它只能有一个父节点。")]),t._v(" "),s("h4",{attrs:{id:"基本术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本术语"}},[t._v("#")]),t._v(" 基本术语")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("根节点")]),t._v(" ： 根节点是树层次结构中的最顶层节点。 换句话说，根节点是没有任何父节点的节点。")]),t._v(" "),s("li",[s("strong",[t._v("子树")]),t._v("： 如果根节点不为空，则树"),s("code",[t._v("T1")]),t._v("，"),s("code",[t._v("T2")]),t._v("和"),s("code",[t._v("T3")]),t._v("称为根节点的子树。")]),t._v(" "),s("li",[s("strong",[t._v("叶节点")]),t._v("： 树的节点，没有任何子节点，称为叶节点。 叶节点是树的最底部节点。 一般树中可以存在任意数量的叶节点。 叶节点也可以称为外部节点。")]),t._v(" "),s("li",[s("strong",[t._v("路径")]),t._v("： 连续边的序列称为路径。 在上图所示的树中，节点"),s("code",[t._v("E")]),t._v("的路径为"),s("code",[t._v("A→B→E")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("祖先节点")]),t._v("： 节点的祖先是从根到该节点的路径上的任何前节点。根节点没有祖先节点。 在上图所示的树中，节点"),s("code",[t._v("F")]),t._v("的祖先是"),s("code",[t._v("B")]),t._v("和"),s("code",[t._v("A")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("度")]),t._v("： 节点的度数等于子节点数，节点数。 在上图所示的树中，节点"),s("code",[t._v("B")]),t._v("的度数为"),s("code",[t._v("2")]),t._v("。叶子节点的度数总是"),s("code",[t._v("0")]),t._v("，而在完整的二叉树中，每个节点的度数等于"),s("code",[t._v("2")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("级别编号")]),t._v("： 为树的每个节点分配一个级别编号，使得每个节点都存在于高于其父级的一个级别。树的根节点始终是级别"),s("code",[t._v("0")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"_3-2-二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-二叉树"}},[t._v("#")]),t._v(" 3.2.二叉树")]),t._v(" "),s("p",[t._v("二叉树是一种特殊类型的通用树，它的每个节点最多可以有两个子节点。 二叉树通常被划分为三个不相交的子集。")]),t._v(" "),s("h2",{attrs:{id:"_3-3-二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-二叉搜索树"}},[t._v("#")]),t._v(" 3.3.二叉搜索树")]),t._v(" "),s("h2",{attrs:{id:"_3-4-平衡搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-平衡搜索树"}},[t._v("#")]),t._v(" 3.4.平衡搜索树")]),t._v(" "),s("h2",{attrs:{id:"_3-5-b树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-b树"}},[t._v("#")]),t._v(" 3.5.B树")]),t._v(" "),s("p",[t._v("B树是一种专用的M阶树，可广泛用于磁盘访问。 M阶树顺序的B树最多可以有"),s("code",[t._v("m-1")]),t._v("个键和M个子树。 使用B树的主要原因之一是它能够在单个节点中存储大量键，并且通过保持树的高度相对较小来存储大键值。")]),t._v(" "),s("p",[t._v("排序M的B树包含M阶树的所有属性。 此外，它还包含以下属性。")]),t._v(" "),s("ul",[s("li",[t._v("B树中的每个节点最多包含"),s("code",[t._v("m")]),t._v("个子节点。")]),t._v(" "),s("li",[t._v("除根节点和叶节点外，B树中的每个节点至少包含"),s("code",[t._v("m/2")]),t._v("个子节点。")]),t._v(" "),s("li",[t._v("根节点必须至少有"),s("code",[t._v("2")]),t._v("个节点。")]),t._v(" "),s("li",[t._v("所有叶节点必须处于同一级别。")])]),t._v(" "),s("p",[t._v("所有节点都不必包含相同数量的子节点，但每个节点必须具有"),s("code",[t._v("m/2")]),t._v("个节点数。")]),t._v(" "),s("h2",{attrs:{id:"_3-6-b-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-b-树"}},[t._v("#")]),t._v(" 3.6.B+树")]),t._v(" "),s("p",[t._v("B+树是B树的扩展，允许有效的插入，删除和搜索操作。")]),t._v(" "),s("p",[t._v("在B树中，键和记录都可以存储在内部节点和叶子节点中。 然而，在B+树中，记录(数据)只能存储在叶节点上，而内部节点只能存储键值。")]),t._v(" "),s("p",[t._v("B+树的叶节点以单链表的形式链接在一起，以使搜索查询更有效。")]),t._v(" "),s("p",[t._v("B+树用于存储无法存储在主存储器中的大量数据。 由于主存储器的大小总是有限的事实，B+树的内部节点(访问记录的键)存储在主存储器中，而叶节点存储在辅助存储器中。")]),t._v(" "),s("h1",{attrs:{id:"_4-图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-图"}},[t._v("#")]),t._v(" 4.图")]),t._v(" "),s("h2",{attrs:{id:"_4-1-图的概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-图的概述"}},[t._v("#")]),t._v(" 4.1.图的概述")]),t._v(" "),s("p",[t._v("图是相对复杂的一种数据结构，由顶点和连接每对顶点的边所构成的图形就是图。")]),t._v(" "),s("p",[t._v("图可以看作是循环树，图中顶点(节点)维持它们之间的任何复杂关系，而不是简单的父子关系。")]),t._v(" "),s("p",[t._v("图中的圆圈叫作“顶点”(Vertex，也叫“结点”)，连接顶点的线叫作“边”（Edge）。也就是说，由顶点和连接每对顶点的边所构成的图形就是图。 图按照顶点指向的方向可分为无向图和有向图，像我上面的就叫无向图。 图在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构。常见的图遍历算法就是广度优先算法和深度优先算法。")])])}),[],!1,null,null,null);a.default=_.exports}}]);